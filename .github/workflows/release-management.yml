# IROAS BOSS V2 - リリース管理ワークフロー
# MLMビジネス要件100%準拠・リリース品質保証

name: 🚢 Release Management

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'リリースタイプ'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
        - hotfix
      environment:
        description: 'リリース対象環境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - all

env:
  # MLMビジネス固有設定（要件定義書準拠）
  HERO_PLAN_PRICE: 10670
  TEST_PLAN_PRICE: 9800
  MAX_MEMBERS: 50
  REWARD_CALCULATION_DAY: 25
  MINIMUM_PAYOUT_AMOUNT: 5000
  CSV_ENCODING: "Shift-JIS"

jobs:
  # ===================
  # リリース前品質検証
  # ===================
  pre-release-validation:
    name: 🛡️ リリース前品質検証
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: iroas_boss_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🐍 Python環境構築
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Python依存関係インストール
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: 📦 Node.js環境構築
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 フロントエンド依存関係インストール
      run: |
        cd frontend
        npm ci
        
    - name: 🗃️ データベース初期化
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/iroas_boss_test
      run: |
        cd backend
        alembic upgrade head
        
    - name: 🧪 リリース前フルテスト実行
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/iroas_boss_test
      run: |
        # バックエンドテスト
        cd backend
        python -m pytest tests/ -v --cov=app --cov-fail-under=80
        
        # フロントエンドテスト
        cd ../frontend
        npm run test
        npm run type-check
        
    - name: 🔍 MLMビジネス要件最終確認
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/iroas_boss_test
      run: |
        cd backend
        python -c "
        from app.models.member import Member
        from app.services.reward_calculation_service import RewardCalculationService
        import os
        
        # 29項目会員データ確認
        fields = [f.name for f in Member.__table__.columns]
        assert len(fields) >= 29, f'会員データ項目不足: {len(fields)}/29'
        
        # 固定料金確認
        hero_price = int(os.environ.get('HERO_PLAN_PRICE', 0))
        test_price = int(os.environ.get('TEST_PLAN_PRICE', 0))
        assert hero_price == 10670 and test_price == 9800, '料金設定異常'
        
        print('✅ リリース前MLMビジネス要件確認完了')
        "

  # ===================
  # セマンティックバージョニング
  # ===================
  version-management:
    name: 📈 バージョン管理
    runs-on: ubuntu-latest
    needs: [pre-release-validation]
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📈 バージョン計算
      id: version
      run: |
        # 現在のバージョン取得
        current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $current_version"
        
        # バージョン番号抽出
        version_number=${current_version#v}
        IFS='.' read -ra VERSION_PARTS <<< "$version_number"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}
        
        # 新バージョン計算
        case "${{ github.event.inputs.release_type }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch|hotfix)
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="v${major}.${minor}.${patch}"
        echo "New version: $new_version"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        
    - name: 📝 変更履歴生成
      id: changelog
      run: |
        echo "## 🚀 IROAS BOSS V2 ${{ steps.version.outputs.new_version }}" > changelog.md
        echo "" >> changelog.md
        echo "### 🏢 MLMビジネス機能" >> changelog.md
        echo "- ✅ 29項目会員データ完全対応" >> changelog.md
        echo "- ✅ 7種ボーナス計算システム" >> changelog.md
        echo "- ✅ 固定料金設定（Hero¥10,670/Test¥9,800）" >> changelog.md
        echo "- ✅ 最大会員数50名制限" >> changelog.md
        echo "- ✅ Univapay・GMO連携準備" >> changelog.md
        echo "" >> changelog.md
        echo "### 📊 変更内容" >> changelog.md
        git log --oneline $(git describe --tags --abbrev=0)..HEAD >> changelog.md
        
        changelog_content=$(cat changelog.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$changelog_content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # ===================
  # 本番環境リリース
  # ===================
  production-release:
    name: 🚀 本番環境リリース
    runs-on: ubuntu-latest
    needs: [pre-release-validation, version-management]
    if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'all'
    environment: production
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🏷️ リリースタグ作成
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ needs.version-management.outputs.new_version }}
        git push origin ${{ needs.version-management.outputs.new_version }}
        
    - name: 🚀 本番環境デプロイトリガー
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci-cd-production.yml',
            ref: 'main',
            inputs: {
              deployment_target: 'all'
            }
          });
        
    - name: 📋 GitHub Release作成
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version-management.outputs.new_version }}
        release_name: 'IROAS BOSS V2 ${{ needs.version-management.outputs.new_version }}'
        body: ${{ needs.version-management.outputs.changelog }}
        draft: false
        prerelease: false

  # ===================
  # ステージング環境リリース
  # ===================
  staging-release:
    name: 🚧 ステージング環境リリース
    runs-on: ubuntu-latest
    needs: [pre-release-validation, version-management]
    if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'all'
    environment: staging
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🚧 ステージング環境デプロイトリガー
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci-cd-staging.yml',
            ref: 'develop'
          });

  # ===================
  # リリース後検証
  # ===================
  post-release-validation:
    name: 🔍 リリース後検証
    runs-on: ubuntu-latest
    needs: [production-release, staging-release]
    if: always() && (needs.production-release.result == 'success' || needs.staging-release.result == 'success')
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🔍 デプロイ後統合検証
      run: |
        cd deployment/verification
        
        if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "all" ]]; then
          echo "本番環境検証実行"
          chmod +x deployment_test.sh
          ./deployment_test.sh production
        fi
        
        if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "all" ]]; then
          echo "ステージング環境検証実行"
          chmod +x deployment_test.sh
          ./deployment_test.sh staging
        fi
        
    - name: 📊 検証レポートアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-validation-report
        path: deployment/verification/test-results/
        retention-days: 90

  # ===================
  # リリース通知
  # ===================
  release-notification:
    name: 📢 リリース通知
    runs-on: ubuntu-latest
    needs: [production-release, staging-release, post-release-validation]
    if: always()
    
    steps:
    - name: 📢 Slack通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: custom
        channel: '#iroas-releases'
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ needs.production-release.result == 'success' || needs.staging-release.result == 'success' }}" === "true" ? "good" : "danger",
              "title": "🚢 IROAS BOSS V2 リリース完了",
              "text": "バージョン: ${{ needs.version-management.outputs.new_version }}\n環境: ${{ github.event.inputs.environment }}\n\nMLMビジネス要件100%準拠リリース\n- ✅ 29項目会員データ対応\n- ✅ 7種ボーナス計算システム\n- ✅ 固定料金設定完了\n- ✅ Univapay・GMO連携準備完了",
              "fields": [
                {
                  "title": "本番環境",
                  "value": "${{ needs.production-release.result }}",
                  "short": true
                },
                {
                  "title": "ステージング環境",
                  "value": "${{ needs.staging-release.result }}",
                  "short": true
                },
                {
                  "title": "リリース後検証",
                  "value": "${{ needs.post-release-validation.result }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_RELEASES }