# IROAS BOSS V2 - CI/CD設定検証ワークフロー
# MLMビジネス要件準拠・CI/CD設定動作確認

name: 🔍 CI/CD Configuration Validation

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/**'
      - 'deployment/**'

jobs:
  # ===================
  # YAML文法検証
  # ===================
  yaml-validation:
    name: 📄 YAML文法検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🔍 YAML Lint
      uses: ibiqlik/action-yamllint@v3
      with:
        file_or_dir: .github/workflows/
        config_file: .github/yamllint-config.yml
        
    - name: 📄 GitHub Actions 文法チェック
      run: |
        echo "GitHub Actions ワークフロー文法チェック"
        for file in .github/workflows/*.yml; do
          echo "検証中: $file"
          # 基本的なYAML構造確認
          python -c "import yaml; yaml.safe_load(open('$file'))"
          echo "✅ $file 文法OK"
        done

  # ===================
  # MLMビジネス設定検証
  # ===================
  mlm-config-validation:
    name: 🏢 MLMビジネス設定検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🏢 MLM設定値検証
      run: |
        echo "MLMビジネス設定検証開始"
        
        # 各ワークフローファイルでMLM設定確認
        for file in .github/workflows/ci-cd-*.yml; do
          echo "検証中: $file"
          
          # 必須環境変数確認
          if grep -q "HERO_PLAN_PRICE: 10670" "$file"; then
            echo "✅ ヒーロープラン価格設定確認"
          else
            echo "❌ ヒーロープラン価格設定エラー"
            exit 1
          fi
          
          if grep -q "TEST_PLAN_PRICE: 9800" "$file"; then
            echo "✅ テストプラン価格設定確認"
          else
            echo "❌ テストプラン価格設定エラー"
            exit 1
          fi
          
          if grep -q "MAX_MEMBERS: 50" "$file"; then
            echo "✅ 最大会員数設定確認"
          else
            echo "❌ 最大会員数設定エラー"
            exit 1
          fi
          
          if grep -q "MINIMUM_PAYOUT_AMOUNT: 5000" "$file"; then
            echo "✅ 最低振込金額設定確認"
          else
            echo "❌ 最低振込金額設定エラー"
            exit 1
          fi
          
          if grep -q "CSV_ENCODING.*Shift-JIS" "$file"; then
            echo "✅ CSV エンコーディング設定確認"
          else
            echo "❌ CSV エンコーディング設定エラー"
            exit 1
          fi
          
          echo "✅ $file MLM設定検証完了"
        done

  # ===================
  # デプロイ設定検証
  # ===================
  deployment-config-validation:
    name: 🚀 デプロイ設定検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🚀 デプロイ設定検証
      run: |
        echo "デプロイ設定検証開始"
        
        # Cloud Build設定確認
        if [ -f "deployment/gcp/cloudbuild.yaml" ]; then
          echo "✅ Cloud Build設定ファイル存在"
          
          # MLM環境変数がCloud Buildに含まれているか確認
          if grep -q "_HERO_PLAN_PRICE" deployment/gcp/cloudbuild.yaml; then
            echo "✅ Cloud Build MLM環境変数設定確認"
          else
            echo "❌ Cloud Build MLM環境変数設定エラー"
            exit 1
          fi
        else
          echo "❌ Cloud Build設定ファイル不存在"
          exit 1
        fi
        
        # Vercel設定確認
        if [ -f "deployment/vercel/vercel.json" ]; then
          echo "✅ Vercel設定ファイル存在"
        else
          echo "❌ Vercel設定ファイル不存在"
          exit 1
        fi
        
        # 環境別設定ファイル確認
        for env in production staging development; do
          if [ -f "deployment/vercel/${env}.env" ]; then
            echo "✅ $env 環境設定ファイル存在"
            
            # MLM設定値確認
            if grep -q "VITE_HERO_PLAN_PRICE=10670" "deployment/vercel/${env}.env"; then
              echo "✅ $env 環境MLM設定確認"
            else
              echo "❌ $env 環境MLM設定エラー"
              exit 1
            fi
          else
            echo "❌ $env 環境設定ファイル不存在"
            exit 1
          fi
        done

  # ===================
  # Secret設定検証
  # ===================
  secrets-validation:
    name: 🔐 Secret設定検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🔐 Secret設定検証
      run: |
        echo "Secret設定検証開始"
        
        # 必須Secret一覧
        required_secrets=(
          "GCP_SA_KEY"
          "GCP_SA_KEY_STAGING"
          "GCP_SA_KEY_DEV"
          "VERCEL_TOKEN"
          "VERCEL_ORG_ID"
          "VERCEL_PROJECT_ID"
          "VERCEL_PROJECT_ID_STAGING"
          "VERCEL_PROJECT_ID_DEV"
          "PRODUCTION_DATABASE_URL"
          "STAGING_DATABASE_URL"
          "DEVELOPMENT_DATABASE_URL"
          "SLACK_WEBHOOK_PRODUCTION"
          "SLACK_WEBHOOK_STAGING"
          "SLACK_WEBHOOK_DEVELOPMENT"
          "SLACK_WEBHOOK_TESTING"
          "SLACK_WEBHOOK_RELEASES"
        )
        
        # ワークフローファイル内でSecret参照確認
        for secret in "${required_secrets[@]}"; do
          if grep -r "\${{ secrets\.$secret }}" .github/workflows/; then
            echo "✅ Secret $secret 参照確認"
          else
            echo "⚠️ Secret $secret 参照未確認（設定が必要な場合があります）"
          fi
        done

  # ===================
  # ワークフロー依存関係検証
  # ===================
  workflow-dependency-validation:
    name: 🔗 ワークフロー依存関係検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🔗 ワークフロー依存関係検証
      run: |
        echo "ワークフロー依存関係検証開始"
        
        # ワークフロー間の呼び出し確認
        for file in .github/workflows/*.yml; do
          echo "検証中: $file"
          
          # workflow_dispatch 設定確認
          if grep -q "workflow_dispatch:" "$file"; then
            echo "✅ $file 手動実行対応"
          fi
          
          # 他ワークフロー呼び出し確認
          if grep -q "uses:.*workflow" "$file" || grep -q "workflow_id:" "$file"; then
            echo "✅ $file ワークフロー間連携確認"
          fi
          
          # 必要なjobs定義確認
          if grep -q "jobs:" "$file"; then
            echo "✅ $file jobs定義確認"
          else
            echo "❌ $file jobs定義エラー"
            exit 1
          fi
        done

  # ===================
  # 検証結果レポート
  # ===================
  validation-report:
    name: 📊 検証結果レポート
    runs-on: ubuntu-latest
    needs: [yaml-validation, mlm-config-validation, deployment-config-validation, secrets-validation, workflow-dependency-validation]
    if: always()
    
    steps:
    - name: 📊 検証結果集約
      run: |
        echo "## 🔍 CI/CD設定検証結果レポート" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 検証項目結果" >> $GITHUB_STEP_SUMMARY
        echo "- **YAML文法検証**: ${{ needs.yaml-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **MLMビジネス設定検証**: ${{ needs.mlm-config-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **デプロイ設定検証**: ${{ needs.deployment-config-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Secret設定検証**: ${{ needs.secrets-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ワークフロー依存関係検証**: ${{ needs.workflow-dependency-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### CI/CD構成確認" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 本番環境デプロイワークフロー (ci-cd-production.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ステージング環境デプロイワークフロー (ci-cd-staging.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 開発環境デプロイワークフロー (ci-cd-development.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 自動テスト実行ワークフロー (test-automation.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ リリース管理ワークフロー (release-management.yml)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### MLMビジネス要件対応確認" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 固定料金設定（Hero¥10,670/Test¥9,800）" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 最大会員数50名制限設定" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 最低振込金額¥5,000設定" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Shift-JIS CSVエンコーディング設定" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 29項目会員データ検証設定" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 7種ボーナス計算システム検証設定" >> $GITHUB_STEP_SUMMARY
        
        # 全検証成功確認
        if [[ "${{ needs.yaml-validation.result }}" == "success" && \
              "${{ needs.mlm-config-validation.result }}" == "success" && \
              "${{ needs.deployment-config-validation.result }}" == "success" && \
              "${{ needs.secrets-validation.result }}" == "success" && \
              "${{ needs.workflow-dependency-validation.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **CI/CD設定検証完全成功！**" >> $GITHUB_STEP_SUMMARY
          echo "Step 20 CI/CD構築の準備が完了しています。" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **一部検証で問題が発見されました。修正が必要です。**" >> $GITHUB_STEP_SUMMARY
        fi