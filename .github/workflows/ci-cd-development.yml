# IROAS BOSS V2 - 開発環境 CI/CD ワークフロー
# MLMビジネス要件100%準拠・要件定義書簡略化厳禁

name: 🛠️ Development Deployment

on:
  push:
    branches: [ feature/*, hotfix/*, bugfix/* ]
  workflow_dispatch:

env:
  # MLMビジネス固有設定（要件定義書準拠）
  HERO_PLAN_PRICE: 10670
  TEST_PLAN_PRICE: 9800
  MAX_MEMBERS: 50
  REWARD_CALCULATION_DAY: 25
  MINIMUM_PAYOUT_AMOUNT: 5000
  CSV_ENCODING: "Shift-JIS"
  
  # 開発環境設定
  ENVIRONMENT: development
  GCP_PROJECT_ID: iroas-boss-v2-dev
  GCP_SERVICE_NAME: iroas-boss-v2-backend-dev
  GCP_REGION: asia-northeast1
  VERCEL_PROJECT_NAME: iroas-boss-v2-dev

jobs:
  # ===================
  # 高速品質検証
  # ===================
  quick-validation:
    name: ⚡ 高速品質検証
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: iroas_boss_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🐍 Python環境構築
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Python依存関係インストール
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🗃️ データベース初期化（MLMスキーマ）
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/iroas_boss_test
      run: |
        cd backend
        alembic upgrade head
        
    - name: 🧪 重要テストのみ実行
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/iroas_boss_test
      run: |
        cd backend
        # 重要なMLM機能のみテスト
        python -m pytest tests/unit/services/test_member_service.py -v
        python -m pytest tests/unit/services/test_reward_calculation_service.py -v
        python -m pytest tests/unit/services/test_payment_management_service.py -v
        
    - name: 🔍 基本MLM要件チェック
      run: |
        cd backend
        # 基本的な構造チェックのみ
        python -c "
        from app.models.member import Member
        fields = [f.name for f in Member.__table__.columns]
        assert len(fields) >= 29, f'会員データ項目不足: {len(fields)}/29'
        print(f'✅ 会員データ項目確認: {len(fields)}項目対応')
        "

  # ===================
  # フロントエンド高速検証
  # ===================
  frontend-quick:
    name: 🎨 フロントエンド高速検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 📦 Node.js環境構築
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 依存関係インストール
      run: |
        cd frontend
        npm ci
        
    - name: 🔍 TypeScript型チェック
      run: |
        cd frontend
        npm run type-check
        
    - name: 🏗️ ビルド検証（開発環境設定）
      env:
        VITE_API_BASE_URL: https://iroas-boss-v2-backend-dev.run.app
        VITE_HERO_PLAN_PRICE: 10670
        VITE_TEST_PLAN_PRICE: 9800
        VITE_MAX_MEMBERS: 50
        VITE_MINIMUM_PAYOUT_AMOUNT: 5000
        VITE_REWARD_CALCULATION_DAY: 25
      run: |
        cd frontend
        npm run build

  # ===================
  # 開発環境デプロイ
  # ===================
  deploy-development:
    name: 🛠️ 開発環境デプロイ
    runs-on: ubuntu-latest
    needs: [quick-validation, frontend-quick]
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    # バックエンドデプロイ
    - name: 🔐 Google Cloud認証
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
        
    - name: ☁️ Google Cloud SDK設定
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: 🐳 Docker認証設定
      run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev
      
    - name: 🏗️ バックエンドビルド・デプロイ
      run: |
        cd backend
        
        # Cloud Buildでビルド・デプロイ
        gcloud builds submit --config ../deployment/gcp/cloudbuild.yaml \
          --substitutions \
          BRANCH_NAME=${{ github.ref_name }},\
          _ENVIRONMENT=development,\
          _HERO_PLAN_PRICE=${{ env.HERO_PLAN_PRICE }},\
          _TEST_PLAN_PRICE=${{ env.TEST_PLAN_PRICE }},\
          _MAX_MEMBERS=${{ env.MAX_MEMBERS }},\
          _MINIMUM_PAYOUT_AMOUNT=${{ env.MINIMUM_PAYOUT_AMOUNT }},\
          _REWARD_CALCULATION_DAY=${{ env.REWARD_CALCULATION_DAY }},\
          _CSV_ENCODING=${{ env.CSV_ENCODING }}
          
    # フロントエンドデプロイ（プレビューデプロイ）
    - name: 📦 Node.js環境構築
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 依存関係インストール
      run: |
        cd frontend
        npm ci
        
    - name: 🚀 Vercel開発環境デプロイ
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--cwd frontend'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_DEV }}
        working-directory: frontend
        
    - name: 🩺 開発環境ヘルスチェック
      run: |
        echo "開発環境ヘルスチェック実行中..."
        
        # バックエンドヘルスチェック（軽量）
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f -s https://${{ env.GCP_SERVICE_NAME }}.run.app/health; then
            echo "✅ バックエンドヘルスチェック成功"
            break
          else
            echo "⏳ バックエンドヘルスチェック試行 $attempt/$max_attempts"
            sleep 10
            attempt=$((attempt + 1))
          fi
        done

  # ===================
  # 開発環境簡易検証
  # ===================
  development-validation:
    name: 🔍 開発環境簡易検証
    runs-on: ubuntu-latest
    needs: [deploy-development]
    
    steps:
    - name: 📥 コード取得
      uses: actions/checkout@v4
      
    - name: 🧪 基本機能検証
      run: |
        echo "開発環境基本機能検証実行中..."
        
        # バックエンドAPI基本チェック
        echo "バックエンドAPI基本チェック"
        curl -f -s https://iroas-boss-v2-backend-dev.run.app/health || echo "⚠️ Backend health check failed"
        
        # 主要エンドポイント存在確認
        curl -s -o /dev/null -w "%{http_code}" https://iroas-boss-v2-backend-dev.run.app/api/v1/members | grep -E "^(200|401|403)$" && echo "✅ Members API確認" || echo "⚠️ Members API異常"
        curl -s -o /dev/null -w "%{http_code}" https://iroas-boss-v2-backend-dev.run.app/api/v1/rewards/history | grep -E "^(200|401|403)$" && echo "✅ Rewards API確認" || echo "⚠️ Rewards API異常"

  # ===================
  # 通知
  # ===================
  notify-development:
    name: 📢 開発環境デプロイ通知
    runs-on: ubuntu-latest
    needs: [deploy-development, development-validation]
    if: always()
    
    steps:
    - name: 📢 Slack通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#iroas-development'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ job.status }}" === "success" ? "good" : "${{ job.status }}" === "failure" ? "danger" : "warning",
              "title": "🛠️ IROAS BOSS V2 開発環境デプロイ",
              "text": "${{ job.status }}" === "success" ? "✅ 開発環境デプロイ成功\n\n機能開発・テスト環境準備完了" : "❌ 開発環境デプロイ失敗",
              "fields": [
                {
                  "title": "ブランチ",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "コミット",
                  "value": "${{ github.sha }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEVELOPMENT }}